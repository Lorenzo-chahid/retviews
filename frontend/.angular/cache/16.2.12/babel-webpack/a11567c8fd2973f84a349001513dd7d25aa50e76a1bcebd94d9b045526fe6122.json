{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http'; // Importer HttpHeaders\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000'; // URL de votre API\n  }\n\n  createUser(user) {\n    return this.http.post(`${this.baseUrl}/users/`, user);\n  }\n  login(username, password) {\n    // Préparation des données de formulaire URL-encodées\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n    console.log('Tentative de connexion avec :', {\n      username,\n      password\n    });\n    return this.http.post(`${this.baseUrl}/token`, body.toString(), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }) // Utilisation du Content-Type pour les données de formulaire\n    }).pipe(tap(res => {\n      console.log('Réponse de connexion :', res);\n      localStorage.setItem('auth_token', res.access_token);\n      const userData = {\n        username: username,\n        email: 'email@example.com'\n      }; // Remplacez par les vraies données de l'utilisateur\n      localStorage.setItem('user', JSON.stringify(userData));\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","tap","AuthService","constructor","http","baseUrl","createUser","user","post","login","username","password","body","URLSearchParams","set","console","log","toString","headers","pipe","res","localStorage","setItem","access_token","userData","email","JSON","stringify","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/lorenzochahid/Retviews/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; // Importer HttpHeaders\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:8000'; // URL de votre API\n\n  constructor(private http: HttpClient) {}\n  createUser(user: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/users/`, user);\n  }\n  \n\n  login(username: string, password: string): Observable<{ access_token: string }> {\n    // Préparation des données de formulaire URL-encodées\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n\n    console.log('Tentative de connexion avec :', { username, password });\n\n    return this.http.post<{ access_token: string }>(`${this.baseUrl}/token`, body.toString(), {\n      headers: new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' }) // Utilisation du Content-Type pour les données de formulaire\n    }).pipe(\n      tap(res => {\n        console.log('Réponse de connexion :', res);\n        localStorage.setItem('auth_token', res.access_token);\n        const userData = { username: username, email: 'email@example.com' }; // Remplacez par les vraies données de l'utilisateur\n        localStorage.setItem('user', JSON.stringify(userData));\n      })\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB,CAAC,CAAC;AAEhE,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAEJ;;EACvCC,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,SAAS,EAAEE,IAAI,CAAC;EACvD;EAGAE,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,MAAMC,IAAI,GAAG,IAAIC,eAAe,EAAE;IAClCD,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IAC9BE,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAE9BI,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;MAAEN,QAAQ;MAAEC;IAAQ,CAAE,CAAC;IAEpE,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAA2B,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEO,IAAI,CAACK,QAAQ,EAAE,EAAE;MACxFC,OAAO,EAAE,IAAIlB,WAAW,CAAC;QAAE,cAAc,EAAE;MAAmC,CAAE,CAAC,CAAC;KACnF,CAAC,CAACmB,IAAI,CACLlB,GAAG,CAACmB,GAAG,IAAG;MACRL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,GAAG,CAAC;MAC1CC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,GAAG,CAACG,YAAY,CAAC;MACpD,MAAMC,QAAQ,GAAG;QAAEd,QAAQ,EAAEA,QAAQ;QAAEe,KAAK,EAAE;MAAmB,CAAE,CAAC,CAAC;MACrEJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEI,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;IACxD,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBA3BU1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}