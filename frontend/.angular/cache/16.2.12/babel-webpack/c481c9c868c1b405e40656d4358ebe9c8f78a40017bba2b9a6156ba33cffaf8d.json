{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:8000';\n  }\n  createUser(user) {\n    console.log(\"CREATE USER :: \", user);\n    return this.http.post(`${this.baseUrl}/users/`, user);\n  }\n  login(username, password, user_id) {\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n    console.log('Tentative de connexion avec :', {\n      username,\n      password\n    });\n    return this.http.post(`${this.baseUrl}/token`, body.toString(), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      })\n    }).pipe(tap(res => {\n      console.log('Réponse de connexion :', res);\n      localStorage.setItem('auth_token', res.access_token);\n      const userData = {\n        username: username,\n        email: 'email@example.com'\n      };\n      localStorage.setItem('user_id', JSON.stringify(userData));\n    }));\n  }\n  logout() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n    this.router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","tap","AuthService","constructor","http","router","baseUrl","createUser","user","console","log","post","login","username","password","user_id","body","URLSearchParams","set","toString","headers","pipe","res","localStorage","setItem","access_token","userData","email","JSON","stringify","logout","removeItem","navigate","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/Users/lorenzochahid/Retviews/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:8000';\n\n  constructor(private http: HttpClient, private router: Router) {}\n  createUser(user: any): Observable<any> {\n    console.log(\"CREATE USER :: \", user)\n    return this.http.post(`${this.baseUrl}/users/`, user);\n  }\n  \n\n  login(username: string, password: string, user_id: number): Observable<{ access_token: string }> {\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n\n    console.log('Tentative de connexion avec :', { username, password });\n\n    return this.http.post<{ access_token: string }>(`${this.baseUrl}/token`, body.toString(), {\n      headers: new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' })\n    }).pipe(\n      tap(res => {\n        console.log('Réponse de connexion :', res);\n        localStorage.setItem('auth_token', res.access_token);\n        const userData = { username: username, email: 'email@example.com' };\n        localStorage.setItem('user_id', JSON.stringify(userData));\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n    this.router.navigate(['/login']);\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,GAAG,QAAoB,gBAAgB;;;;AAMhD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,OAAO,GAAG,uBAAuB;EAEsB;EAC/DC,UAAUA,CAACC,IAAS;IAClBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAAC;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,SAAS,EAAEE,IAAI,CAAC;EACvD;EAGAI,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,OAAe;IACvD,MAAMC,IAAI,GAAG,IAAIC,eAAe,EAAE;IAClCD,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEL,QAAQ,CAAC;IAC9BG,IAAI,CAACE,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IAE9BL,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;IAEpE,OAAO,IAAI,CAACV,IAAI,CAACO,IAAI,CAA2B,GAAG,IAAI,CAACL,OAAO,QAAQ,EAAEU,IAAI,CAACG,QAAQ,EAAE,EAAE;MACxFC,OAAO,EAAE,IAAIpB,WAAW,CAAC;QAAE,cAAc,EAAE;MAAmC,CAAE;KACjF,CAAC,CAACqB,IAAI,CACLpB,GAAG,CAACqB,GAAG,IAAG;MACRb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,GAAG,CAAC;MAC1CC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,GAAG,CAACG,YAAY,CAAC;MACpD,MAAMC,QAAQ,GAAG;QAAEb,QAAQ,EAAEA,QAAQ;QAAEc,KAAK,EAAE;MAAmB,CAAE;MACnEJ,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEI,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH;EACH;EAEAI,MAAMA,CAAA;IACJP,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;IACrCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAC1B,MAAM,CAAC2B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAAC,QAAAC,CAAA,G;qBAjCU/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtC,WAAW;IAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}