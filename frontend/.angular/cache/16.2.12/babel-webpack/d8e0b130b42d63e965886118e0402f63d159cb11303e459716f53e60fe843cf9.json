{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http'; // Importer HttpHeaders\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000'; // URL de votre API\n  }\n\n  login(username, password) {\n    console.log('Tentative de connexion avec :', {\n      username,\n      password\n    }); // Ajout d'un console.log pour voir les données\n    return this.http.post(`${this.baseUrl}/token`, {\n      username,\n      password\n    }, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }) // S'assurer que les données sont envoyées en JSON\n    }).pipe(tap(res => {\n      console.log('Réponse de connexion :', res); // Voir la réponse\n      localStorage.setItem('auth_token', res.access_token);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","tap","AuthService","constructor","http","baseUrl","login","username","password","console","log","post","headers","pipe","res","localStorage","setItem","access_token","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/lorenzochahid/Retviews/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; // Importer HttpHeaders\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:8000'; // URL de votre API\n\n  constructor(private http: HttpClient) {}\n\n  login(username: string, password: string): Observable<{ access_token: string }> {\n    console.log('Tentative de connexion avec :', { username, password }); // Ajout d'un console.log pour voir les données\n\n    return this.http.post<{ access_token: string }>(`${this.baseUrl}/token`, { username, password }, {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }) // S'assurer que les données sont envoyées en JSON\n    }).pipe(\n      tap(res => {\n        console.log('Réponse de connexion :', res); // Voir la réponse\n        localStorage.setItem('auth_token', res.access_token);\n      })\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB,CAAC,CAAC;AAEhE,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAEJ;;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAAC,CAAC;IAEtE,OAAO,IAAI,CAACJ,IAAI,CAACO,IAAI,CAA2B,GAAG,IAAI,CAACN,OAAO,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,EAAE;MAC/FI,OAAO,EAAE,IAAIZ,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE,CAAC,CAAC;KAClE,CAAC,CAACa,IAAI,CACLZ,GAAG,CAACa,GAAG,IAAG;MACRL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,GAAG,CAAC,CAAC,CAAC;MAC5CC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,GAAG,CAACG,YAAY,CAAC;IACtD,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBAhBUhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}